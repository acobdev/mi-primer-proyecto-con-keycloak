{"version":3,"file":"SigningInPage.js","names":["React","withRouter","Alert","Button","DataList","DataListAction","DataListItemCells","DataListCell","DataListItem","DataListItemRow","EmptyState","EmptyStateVariant","EmptyStateBody","Split","SplitItem","Title","Dropdown","DropdownPosition","KebabToggle","PageSection","PageSectionVariants","AIACommand","TimeUtil","AccountServiceContext","ContinueCancelModal","Msg","ContentPage","ContentAlert","KeycloakContext","SigningInPage","Component","constructor","props","context","_defineProperty","credentialId","userLabel","doDelete","encodeURIComponent","then","getCredentialContainers","success","state","credentialContainers","Map","doGet","response","allContainers","containers","data","forEach","container","categoryMap","get","category","set","type","setState","credElementId","credType","credId","item","substring","render","createElement","title","introMessage","renderCategories","Array","from","keys","map","key","variant","light","id","headingLevel","size","msgKey","renderTypes","credTypeMap","Consumer","keycloak","Fragment","index","typeArray","renderCredTypeTitle","renderUserCredentials","renderEmptyRow","isLast","dataListCells","credContainer","userCredentialMetadatas","removeable","displayName","length","localizedDisplayName","localize","className","xs","params","credentialMetadata","credential","hasOwnProperty","createdDate","strCreatedDate","format","updateAIA","updateAction","maxWidth","infoMessage","warningMessageTitle","warningMessageDescription","isInline","isPlain","JSON","parse","parameters","style","credentialRowCells","CredentialAction","credRemover","handleRemove","credMetadata","credRowCells","push","setupAction","createAction","credContainerDisplayName","helptext","isFilled","position","right","toggle","onToggle","isOpen","open","dropdownItems","onClick","execute","buttonTitle","buttonVariant","buttonId","modalTitle","modalMessage","onContinue","SigningInPageWithRouter"],"sources":["../../../src/app/content/signingin-page/SigningInPage.tsx"],"sourcesContent":["/*\n * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport {\n    Alert,\n    Button,\n    DataList,\n    DataListAction,\n    DataListItemCells,\n    DataListCell,\n    DataListItem,\n    DataListItemRow,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateBody,\n    Split,\n    SplitItem,\n    Title,\n    Dropdown,\n    DropdownPosition,\n    KebabToggle,\n    PageSection,\n    PageSectionVariants\n} from \"@patternfly/react-core\";\n\nimport { AIACommand } from \"../../util/AIACommand\";\nimport TimeUtil from \"../../util/TimeUtil\";\nimport {\n    HttpResponse,\n    AccountServiceClient,\n} from \"../../account-service/account.service\";\nimport { AccountServiceContext } from \"../../account-service/AccountServiceContext\";\nimport { ContinueCancelModal } from \"../../widgets/ContinueCancelModal\";\nimport { Features } from \"../../widgets/features\";\nimport { Msg } from \"../../widgets/Msg\";\nimport { ContentPage } from \"../ContentPage\";\nimport { ContentAlert } from \"../ContentAlert\";\nimport { KeycloakContext } from \"../../keycloak-service/KeycloakContext\";\nimport { KeycloakService } from \"../../keycloak-service/keycloak.service\";\nimport { css } from \"@patternfly/react-styles\";\n\ndeclare const features: Features;\n\ninterface PasswordDetails {\n    registered: boolean;\n    lastUpdate: number;\n}\n\ntype CredCategory = \"password\" | \"two-factor\" | \"passwordless\";\ntype CredType = string;\ntype CredTypeMap = Map<CredType, CredentialContainer>;\ntype CredContainerMap = Map<CredCategory, CredTypeMap>;\n\ninterface CredMetadata {\n    infoMessage?: string;\n    warningMessageTitle?: string;\n    warningMessageDescription?: string;\n    credential: UserCredential;\n}\n\ninterface UserCredential {\n    id: string;\n    type: string;\n    userLabel: string;\n    createdDate?: number;\n    strCreatedDate?: string;\n    credentialData?: string;\n}\n\n// A CredentialContainer is unique by combo of credential type and credential category\ninterface CredentialContainer {\n    category: CredCategory;\n    type: CredType;\n    displayName: string;\n    helptext?: string;\n    createAction?: string;\n    updateAction?: string;\n    removeable: boolean;\n    userCredentialMetadatas: CredMetadata[];\n    open: boolean;\n}\n\ninterface SigningInPageProps extends RouteComponentProps {}\n\ninterface SigningInPageState {\n    // Credential containers organized by category then type\n    credentialContainers: CredContainerMap;\n}\n\n/**\n * @author Stan Silvert ssilvert@redhat.com (C) 2018 Red Hat Inc.\n */\nclass SigningInPage extends React.Component<\n    SigningInPageProps,\n    SigningInPageState\n> {\n    static contextType = AccountServiceContext;\n    context: React.ContextType<typeof AccountServiceContext>;\n\n    public constructor(\n        props: SigningInPageProps,\n        context: React.ContextType<typeof AccountServiceContext>\n    ) {\n        super(props);\n        this.context = context;\n\n        this.state = {\n            credentialContainers: new Map(),\n        };\n\n        this.getCredentialContainers();\n    }\n\n    private getCredentialContainers(): void {\n        this.context!.doGet<CredentialContainer[]>(\"/credentials\").then(\n            (response) => {\n                const allContainers: CredContainerMap = new Map();\n                const containers: CredentialContainer[] = response.data || [];\n                containers.forEach((container) => {\n                    let categoryMap = allContainers.get(container.category);\n                    if (!categoryMap) {\n                        categoryMap = new Map();\n                        allContainers.set(container.category, categoryMap);\n                    }\n                    categoryMap.set(container.type, container);\n                });\n\n                this.setState({ credentialContainers: allContainers });\n            }\n        );\n    }\n\n    private handleRemove = (credentialId: string, userLabel: string) => {\n        this.context!.doDelete(\"/credentials/\" + encodeURIComponent(credentialId)).then(() => {\n            this.getCredentialContainers();\n            ContentAlert.success(\"successRemovedMessage\", [userLabel]);\n        });\n    };\n\n    public static credElementId(\n        credType: CredType,\n        credId: string,\n        item: string\n    ): string {\n        return `${credType}-${item}-${credId.substring(0, 8)}`;\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <ContentPage title=\"signingIn\" introMessage=\"signingInSubMessage\">\n                {this.renderCategories()}\n            </ContentPage>\n        );\n    }\n\n    private renderCategories(): React.ReactNode {\n      return Array.from(this.state.credentialContainers.keys()).map(\n          (category) => (\n            <PageSection key={category} variant={PageSectionVariants.light}>\n              <Title\n                  id={`${category}-categ-title`}\n                  headingLevel=\"h2\"\n                  size=\"xl\"\n              >\n                <Msg msgKey={category} />\n              </Title>\n              {this.renderTypes(category!)}\n            </PageSection>\n         )\n       ) \n    }\n\n    private renderTypes(category: CredCategory): React.ReactNode {\n        let credTypeMap: CredTypeMap = this.state.credentialContainers.get(\n            category\n        )!;\n\n        return (\n            <KeycloakContext.Consumer>\n                {(keycloak) => (\n                    <>\n                        {Array.from(\n                            credTypeMap.keys()\n                        ).map(\n                            (\n                                credType: CredType,\n                                index: number,\n                                typeArray: string[]\n                            ) => [\n                                this.renderCredTypeTitle(\n                                    credTypeMap.get(credType)!,\n                                    keycloak!,\n                                    category\n                                ),\n                                this.renderUserCredentials(\n                                    credTypeMap,\n                                    credType,\n                                    keycloak!\n                                ),\n                            ]\n                        )}\n                    </>\n                )}\n            </KeycloakContext.Consumer>\n        );\n    }\n\n    private renderEmptyRow(type: string, isLast: boolean): React.ReactNode {\n        if (isLast) return; // don't put empty row at the end\n\n        return (\n            <DataListItem aria-labelledby={\"empty-list-item-\" + type}>\n                <DataListItemRow key={\"empty-row-\" + type}>\n                    <DataListItemCells\n                        dataListCells={[<DataListCell></DataListCell>]}\n                    />\n                </DataListItemRow>\n            </DataListItem>\n        );\n    }\n\n    private renderUserCredentials(\n        credTypeMap: CredTypeMap,\n        credType: CredType,\n        keycloak: KeycloakService\n    ): React.ReactNode {\n        const credContainer: CredentialContainer = credTypeMap.get(credType)!;\n        const userCredentialMetadatas: CredMetadata[] = credContainer.userCredentialMetadatas;\n        const removeable: boolean = credContainer.removeable;\n        const type: string = credContainer.type;\n        const displayName: string = credContainer.displayName;\n\n        if (!userCredentialMetadatas || userCredentialMetadatas.length === 0) {\n            const localizedDisplayName = Msg.localize(displayName);\n            return (\n              <DataList aria-label={Msg.localize('notSetUp', [localizedDisplayName])} className=\"pf-u-mb-xl\">\n                <DataListItem key='no-credentials-list-item' aria-labelledby={Msg.localize('notSetUp', [localizedDisplayName])}>\n                    <DataListItemRow key='no-credentials-list-item-row' className=\"pf-u-align-items-center\">\n                        <DataListItemCells\n                            dataListCells={[\n                                <DataListCell key={'no-credentials-cell-0'}/>,\n                                <EmptyState id={`${type}-not-set-up`} key={'no-credentials-cell-1'} variant={EmptyStateVariant.xs}>\n                                    <EmptyStateBody>\n                                        <Msg msgKey='notSetUp' params={[localizedDisplayName]}/>\n                                    </EmptyStateBody>\n                                </EmptyState>,\n                                <DataListCell key={'no-credentials-cell-2'}/>\n                            ]}/>\n                    </DataListItemRow>\n                </DataListItem>\n              </DataList>\n            );\n        }\n\n        userCredentialMetadatas.forEach(credentialMetadata => {\n            let credential = credentialMetadata.credential;\n            if (!credential.userLabel) credential.userLabel = Msg.localize(credential.type);\n            if (credential.hasOwnProperty('createdDate') && credential.createdDate && credential.createdDate! > 0) {\n                credential.strCreatedDate = TimeUtil.format(credential.createdDate as number);\n            }\n        });\n\n        let updateAIA: AIACommand;\n        if (credContainer.updateAction) {\n            updateAIA = new AIACommand(keycloak, credContainer.updateAction);\n        }\n\n        let maxWidth = { maxWidth: 689 } as React.CSSProperties;\n\n        return (\n            <React.Fragment key='userCredentialMetadatas'> {\n                userCredentialMetadatas.map(credentialMetadata => (\n                  <>\n                    {(credentialMetadata.infoMessage && !credentialMetadata.warningMessageTitle && !credentialMetadata.warningMessageDescription) && \n                      <Alert variant=\"default\" className=\"pf-u-mb-md\" isInline isPlain title={Msg.localize(JSON.parse(credentialMetadata.infoMessage).key, JSON.parse(credentialMetadata.infoMessage).parameters)} />\n                    }\n                    {(credentialMetadata.warningMessageTitle && credentialMetadata.warningMessageDescription) &&\n                      <Alert variant=\"warning\" className=\"pf-u-mb-md\" isInline title={Msg.localize(JSON.parse(credentialMetadata.warningMessageTitle).key, JSON.parse(credentialMetadata.warningMessageTitle).parameters)} style={maxWidth}>\n                                \n                        <p>{Msg.localize(JSON.parse(credentialMetadata.warningMessageDescription).key, JSON.parse(credentialMetadata.warningMessageDescription).parameters)}</p>\n                      </Alert>\n                    }\n                    <DataList aria-label=\"user credential\" className=\"pf-u-mb-xl\">\n                      <DataListItem id={`${SigningInPage.credElementId(type, credentialMetadata.credential.id, 'row')}`} key={'credential-list-item-' + credentialMetadata.credential.id} aria-labelledby={'credential-list-item-' + credentialMetadata.credential.userLabel}>\n                          <DataListItemRow key={'userCredentialRow-' + credentialMetadata.credential.id} className=\"pf-u-align-items-center\">\n                              <DataListItemCells dataListCells={this.credentialRowCells(credentialMetadata, type)}/>\n                              <CredentialAction\n                                credential={credentialMetadata.credential}\n                                removeable={removeable}\n                                updateAction={updateAIA}\n                                credRemover={this.handleRemove}\n                              />\n                          </DataListItemRow>\n                      </DataListItem>\n                    </DataList>\n                  </>\n                ))\n            } </React.Fragment>\n        )\n    }\n\n    private credentialRowCells(credMetadata: CredMetadata, type: string): React.ReactNode[] {\n        const credRowCells: React.ReactNode[] = [];\n        const credential = credMetadata.credential;\n        let maxWidth = { \"--pf-u-max-width--MaxWidth\": \"300px\" } as React.CSSProperties;\n        credRowCells.push(\n            <DataListCell id={`${SigningInPage.credElementId(type, credential.id, 'label')}`} key={'userLabel-' + credential.id} className=\"pf-u-max-width\" style={maxWidth}>\n                {credential.userLabel}\n            </DataListCell>\n        );\n        if (credential.strCreatedDate) {\n            credRowCells.push(\n                <DataListCell\n                    id={`${SigningInPage.credElementId(\n                        type,\n                        credential.id,\n                        \"created-at\"\n                    )}`}\n                    key={\"created-\" + credential.id}\n                >\n                    <strong className=\"pf-u-mr-md\">\n                        <Msg msgKey=\"credentialCreatedAt\" />{\" \"}\n                    </strong>\n                    {credential.strCreatedDate}\n                </DataListCell>\n            );\n            credRowCells.push(<DataListCell key={\"spacer-\" + credential.id} />);\n        }\n\n        return credRowCells;\n    }\n\n    private renderCredTypeTitle(\n        credContainer: CredentialContainer,\n        keycloak: KeycloakService,\n        category: CredCategory\n    ): React.ReactNode {\n      \n        if (\n            !credContainer.hasOwnProperty(\"helptext\") &&\n            !credContainer.hasOwnProperty(\"createAction\")\n        )\n            return;\n\n        let setupAction: AIACommand;\n        if (credContainer.createAction) {\n            setupAction = new AIACommand(keycloak, credContainer.createAction);\n        }\n\n        const credContainerDisplayName: string = Msg.localize(\n            credContainer.displayName\n        );\n        return (\n            <React.Fragment key={\"credTypeTitle-\" + credContainer.type}>\n                <Split className=\"pf-u-mt-lg pf-u-mb-lg\">\n                    <SplitItem>\n                        <Title\n                            headingLevel=\"h3\"\n                            size=\"md\"\n                            className=\"pf-u-mb-md\"\n                        >\n                            <span className=\"cred-title pf-u-display-block\" id={`${credContainer.type}-cred-title`}>\n                                <Msg msgKey={credContainer.displayName} />\n                            </span>\n                        </Title>\n                        <span id={`${credContainer.type}-cred-help`}>\n                            {credContainer.helptext && (\n                                <Msg msgKey={credContainer.helptext} />\n                            )}\n                        </span>\n                    </SplitItem>\n\n                    <SplitItem isFilled>\n                        {credContainer.createAction && (\n                            <div\n                                id={\"mob-setUpAction-\" + credContainer.type}\n                                className=\"pf-u-display-none-on-lg pf-u-float-right\"\n                            >\n                                <Dropdown\n                                    isPlain\n                                    position={DropdownPosition.right}\n                                    toggle={\n                                        <KebabToggle\n                                            onToggle={(isOpen) => {\n                                                credContainer.open = isOpen;\n                                                this.setState({\n                                                    credentialContainers: new Map(\n                                                        this.state.credentialContainers\n                                                    ),\n                                                });\n                                            }}\n                                        />\n                                    }\n                                    isOpen={credContainer.open}\n                                    dropdownItems={[\n                                        <button\n                                            id={`mob-${credContainer.type}-set-up`}\n                                            className=\"pf-c-button pf-m-link\"\n                                            type=\"button\"\n                                            onClick={() =>\n                                                setupAction.execute()\n                                            }\n                                        >\n                                            <span className=\"pf-c-button__icon\">\n                                                <i\n                                                    className=\"fa fa-plus-circle\"\n                                                    aria-hidden=\"true\"\n                                                ></i>\n                                            </span>\n                                            <Msg\n                                                msgKey=\"setUpNew\"\n                                                params={[\n                                                    credContainerDisplayName,\n                                                ]}\n                                            />\n                                        </button>,\n                                    ]}\n                                />\n                            </div>\n                        )}\n                        {credContainer.createAction && (\n                            <div\n                                id={\"setUpAction-\" + credContainer.type}\n                                className=\"pf-u-display-none pf-u-display-inline-flex-on-lg pf-u-float-right\"\n                            >\n                                <button\n                                    id={`${credContainer.type}-set-up`}\n                                    className=\"pf-c-button pf-m-link\"\n                                    type=\"button\"\n                                    onClick={() => setupAction.execute()}\n                                >\n                                    <span className=\"pf-c-button__icon\">\n                                        <i\n                                            className=\"fa fa-plus-circle\"\n                                            aria-hidden=\"true\"\n                                        ></i>\n                                    </span>\n                                    <Msg\n                                        msgKey=\"setUpNew\"\n                                        params={[credContainerDisplayName]}\n                                    />\n                                </button>\n                            </div>\n                        )}\n                    </SplitItem>\n                </Split>\n            </React.Fragment>\n        );\n    }\n}\n\ntype CredRemover = (credentialId: string, userLabel: string) => void;\ninterface CredentialActionProps {\n    credential: UserCredential;\n    removeable: boolean;\n    updateAction: AIACommand;\n    credRemover: CredRemover;\n};\n\nclass CredentialAction extends React.Component<CredentialActionProps> {\n    render(): React.ReactNode {\n        if (this.props.updateAction) {\n            return (\n                <DataListAction\n                    aria-labelledby={Msg.localize('updateCredAriaLabel')}\n                    aria-label={Msg.localize('updateCredAriaLabel')}\n                    id={\"updateAction-\" + this.props.credential.id}\n                >\n                    <Button\n                        variant=\"secondary\"\n                        id={`${SigningInPage.credElementId(\n                            this.props.credential.type,\n                            this.props.credential.id,\n                            \"update\"\n                        )}`}\n                        onClick={() => this.props.updateAction.execute()}\n                    >\n                        <Msg msgKey=\"update\" />\n                    </Button>\n                </DataListAction>\n            );\n        }\n\n        if (this.props.removeable) {\n            const userLabel: string = this.props.credential.userLabel;\n            return (\n                <DataListAction\n                  aria-label={Msg.localize('removeCredAriaLabel')}\n                  aria-labelledby={Msg.localize('removeCredAriaLabel')}\n                  id={'removeAction-' + this.props.credential.id }\n                >\n                    <ContinueCancelModal \n                        buttonTitle='remove'\n                        buttonVariant='danger'\n                        buttonId={`${SigningInPage.credElementId(this.props.credential.type, this.props.credential.id, 'remove')}`}\n                        modalTitle={Msg.localize('removeCred', [userLabel])}\n                        modalMessage={Msg.localize('stopUsingCred', [userLabel])}\n                        onContinue={() => this.props.credRemover(this.props.credential.id, userLabel)}\n                    />\n                </DataListAction>\n            );\n        }\n\n        return <></>;\n    }\n}\n\nconst SigningInPageWithRouter = withRouter(SigningInPage);\nexport { SigningInPageWithRouter as SigningInPage };\n"],"mappings":"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"}